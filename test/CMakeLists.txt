PROJECT(blob_demo)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(TARGET_TEST "blob_demo")

# compiler related
SET(CMAKE_C_COMPILER "gcc")
SET(CMAKE_CXX_COMPILER "g++")
SET(CMAKE_C_FLAGS "-g -Wall -std=gnu99")
SET(CMAKE_CXX_FLAGS "-g -Wall -std=c++11")
ADD_DEFINITIONS("-DCPU_ONLY")
ADD_DEFINITIONS("-DUSE_EIGEN")

# other public variables
SET(OPENCV_LIBS opencv_core opencv_highgui opencv_imgproc)

# include directories, headers and libs
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/lib)

# mesages to display
MESSAGE(STATUS "PROJECT_NAME: ${PROJECT_NAME}")
MESSAGE(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
MESSAGE(STATUS "CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
MESSAGE(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
MESSAGE(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
MESSAGE(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "OPENCV_LIBS: ${OPENCV_LIBS}")

# build all targets
AUX_SOURCE_DIRECTORY(. COMMON_SRC_LIST)
MESSAGE(STATUS "COMMON_SRC_LIST: ${COMMON_SRC_LIST}")

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR})
MESSAGE(STATUS "EXECUTABLE_OUTPUT_PATH: ${CMAKE_CURRENT_SOURCE_DIR}")
ADD_EXECUTABLE(${TARGET_TEST} ${COMMON_SRC_LIST})
TARGET_LINK_LIBRARIES(${TARGET_TEST} ${OPENCV_LIBS} caffe protobuf glog pthread)

